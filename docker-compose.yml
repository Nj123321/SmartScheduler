---
version: '3'
services:
  ## MySQL Docker Compose Config
#  postgres-order:
#    container_name: postgres-order
#    image: postgres
#    environment:
#      POSTGRES_DB: order-service
#      POSTGRES_USER: admin
#      POSTGRES_PASSWORD: passwordorder
#      PGDATA: /data/postgres
#    volumes:
#      - ./postgres-order:/data/postgres
#    expose:
#      - "5431"
#    ports:
#      - "5431:5431"
#    command: -p 5431
#    restart: unless-stopped

#  postgres-inventory:
#    container_name: postgres-inventory
#    image: postgres
#    environment:
#      POSTGRES_DB: inventory-service
#      POSTGRES_USER: admin
#      POSTGRES_PASSWORD: passwordinventory
#      PGDATA: /data/postgres
#    volumes:
#      - ./postgres-inventory:/data/postgres
#    ports:
#      - "5432:5432"
#    restart: unless-stopped

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/newpassword
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - ./neo4j_db/data:/data
      - ./neo4j_db/logs:/logs
      - ./neo4j_db/import:/var/lib/neo4j/import
      - ./neo4j_db/plugins:/plugins

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mariadb:latest
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./keycloak-realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.0.1
#    container_name: zookeeper
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#
#  broker:
#    image: confluentinc/cp-kafka:7.0.1
#    container_name: broker
#    ports:
#      - "9092:9092"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#
#  ## Zipkin
#  zipkin:
#    image: openzipkin/zipkin
#    container_name: zipkin
#    ports:
#      - "9411:9411"
  ## Eureka Server
#
  discovery-server:
    build: ./DiscoveryServer
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin

  api-gateway:
    build: ./ApiGatewayService
    container_name: api-gateway
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
#      - zipkin
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  scheduler:
    container_name: scheduler-service
    build: ./Scheduler
    ports:
      - "6453:6453"
    expose:
      - "6453"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

#  ## Order-Service Docker Compose Config
#  order-service:
#    container_name: order-service
#    image: nathanjin123321/orderservice:latest
#    pull_policy: always
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
#    depends_on:
#      - postgres-order
#      - broker
#      - zipkin
#      - discovery-server
#      - api-gateway

  ## Inventory-Service Docker Compose Config
  coursecatalog:
    container_name: course-catalog
    build: ./CourseCatalog
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
    depends_on:
#      - postgres-inventory
      - discovery-server
      - api-gateway
#
#  ## Notification-Service Docker Compose Config
#  notification-service:
#    container_name: notification-service
#    image: saiupadhyayula007/notification-service:latest
#    pull_policy: always
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin
#      - broker
#      - discovery-server
#      - api-gateway